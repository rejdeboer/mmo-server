use renet_netcode::{ConnectToken, NetcodeError};

pub fn decode_token(encoded: String) -> Result<ConnectToken, NetcodeError> {
    // NOTE: Take the base64 padding into account
    let mut decoded: [u8; 4096] = [0; 4096];
    let bytes_written = base64::decode_config_slice(encoded, base64::STANDARD_NO_PAD, &mut decoded)
        .map_err(|_| NetcodeError::PayloadAboveLimit)?;

    let mut token = &decoded[..1024];

    ConnectToken::read(&mut token)
}

#[test]
fn test_decode() {
    let encodedkVUQ09ERSAxLjAyAAAAAAAAAAAA/NhRaAAAAAAo2lFoAAAAAHaiCHuAqcQYUHAcSoJDpUx+L3gfuKzjKRMfIB7ZOZ3bFCEeFf7lgPuIvdFFb+Z3hbReNZuMJKYrzbrOl8QBrWlud18bM83qYJ+nDzObgX6xWK8jFVdrID9mXH18eHSiJTBxeCD9WjRuf7YzEtbIOaOBQFxXdP9wtbCtU8X2dRTRPJesGl/DggAMjVyDsGw34VGEvkBLXYJgg6kZJ3SMXDPYrrBXnudRTjxcRmnwuDKjzFMiw/BvOJY98gyTjtPcrEoMwADYOlG0IYY9s8hhnq6B8twIoG+ZE553hdz0qIcYx9wYbPrxIMD/BJrpqZka/VPXLkiwnBl14WW6iYVXrUinF3GWRAvF+wI9AccDDFszZnblg5Gq5IKz2Vvi/WwgoIputQRLav6lnRfApxpey8zBAxO6aSwwmwfenhj8qFHrdVSfDGBuaduKYSdd/yi1JZ/TK3RgLNkpjUOwwK9PAQ/7cCysW7VtsVqm1fvmQIp+cDjImcpupJecBCYhc/4/K2AnVhHhAx2cHX0SqL4U706rr4JEaXX7jwO2W+vAYWaCj0zGmpd15H/xUppx2dO1LsNkhO5CvSoewVCaD0qbXjC2kYyAhOxKpgdARAD82tdVUeZQqxG2qwR2Cod0bQ0jzCgjWNJiFNjj6zB4eL8gEvaQJ6S6jJc2hef3ie2bJx7k2tBWDZTEtV038FXfV8axFnl2N7dPFYH78Er8YJFlMfb+9NfU9qKfZq5cxxO5uhe1K1J091IL8CPmnwVHF0uGn+MrP2bGykT+Kfx4SCPnyRF5pjvrcbaAymC0D2D9OG45ztn0egppjifbf+Co+Ld8eVYULyqAO+ZBoASkwr4/9TkYnCP4ocurgpiZNVHmrv97Pmo/wRz8w0WU+Nf/HmW3adJdd6teUubXbaWggnXxm0g4oDky31JsuIOPhhRkL15dLSbZbYXu7Vgc17RA6E23qEpQaWYonWbzArgR5Dd7fGTtA8Fwl/hUonKsE+yc2D5/PDwAfOM0KWFxXIFOH1BILVZpucDGLzvOndWGjxtVnGl33KyKzqglLe+wUDvpI6LjuwWmhpAS0nw9wEDeJEos12rcVK3n5M2w4ALhyKRjEdWsXNapCvomN09WBRV7tSu5TfP/M9f98pDNJNtIIzXis04BE6/mHpC1jlvHw2wKdrNnGeHDNIkLXPUhKup9ChPXZEt7x9cxenp+qXnPCaaCDFy+R1ZTIekD+FB/dESBRAPZ3o0hKytG/Fm6giJICKYtc8DP0Mcl0bHvhJWWjgz2Dqd2kQFy7exgFEVH4ii28H1tcxyO05bmnPfax9QxJ94CmBGlQkXkFcL6pAevvNHmE/ahduPJmufMrSsVBU1uFswgzxyaVLddlbqbr/q371sPjQ+SFqidCnYPAAAAAQAAAAF/AAABQB+3dqzsJsmHweG6KlcYy2W4jLDw8JB3gEsX2zfD2sS3v+EwyvEVzZFuoNAmCvvx3CRyfOjuBROoAsPlhzRgAXp2".to_string();

    decode_token(encoded).unwrap();
}
