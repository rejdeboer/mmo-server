name: Server push

on:
  push:
    paths:
      - ".github/workflows/web-server-push.yml"
      - "web-server"
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  SQLX_VERSION: 0.8.6
  SQLX_FEATURES: "rustls,postgres"
  APP_USER: app
  APP_USER_PWD: secret
  APP_DB_NAME: mmo

permissions:
      id-token: write

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
      redis:
        image: redis:7
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT }}
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          key: sqlx-${{ env.SQLX_VERSION }}
      - name: Install sqlx-cli
        run: cargo install sqlx-cli --version=${{ env.SQLX_VERSION }} --features ${{ env.SQLX_FEATURES }} --no-default-features --locked
      - name: Migrate database
        run: |
          sudo apt-get install libpq-dev -y
          SKIP_DOCKER=true ./scripts/init_db.sh
      - name: Check sqlx-data.json is up-to-date
        run: |
          run: cargo sqlx prepare --workspace --check -- --all-targets
      - name: Run tests
        run: cargo test

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: web-server
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
      - name: Install the Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt
      - name: Enforce formatting
        run: cargo fmt --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    env:
      SQLX_OFFLINE: true
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
      - name: Install the Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy
      - name: Linting
        run: cargo clippy -- -D warnings

  coverage:
    name: Code coverage
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
      redis:
        image: redis:7
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
      - name: Install the Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: llvm-tools-preview
      - name: Install sqlx-cli
        run: cargo install sqlx-cli
          --version=${{ env.SQLX_VERSION }}
          --features ${{ env.SQLX_FEATURES }}
          --no-default-features
          --locked
      - name: Create app user in Postgres
        run: |
          sudo apt-get install postgresql-client

          # Create the application user
          CREATE_QUERY="CREATE USER ${APP_USER} WITH PASSWORD '${APP_USER_PWD}';"
          PGPASSWORD="password" psql -U "postgres" -h "localhost" -c "${CREATE_QUERY}"

          # Grant create db privileges to the app user
          GRANT_QUERY="ALTER USER ${APP_USER} CREATEDB;"
          PGPASSWORD="password" psql -U "postgres" -h "localhost" -c "${GRANT_QUERY}"
      - name: Migrate database
        run: SKIP_DOCKER=true ./scripts/init_db.sh
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: Generate code coverage
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
      - name: Generate report
        run: cargo llvm-cov report --html --output-dir coverage
      - uses: actions/upload-artifact@v4
        with:
          name: "Coverage report"
          path: coverage/

  docker:
    runs-on: ubuntu-latest
    needs: [ "test", "fmt", "clippy", "coverage" ]
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: rejdeboer
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push web-server
        uses: docker/build-push-action@v6
        with:
          push: true
          target: web-server
          tags: rejdeboer/web-server:latest
          secrets: |
            GIT_AUTH_TOKEN=${{ secrets.PAT }}
      - name: Build and push mmo-server
        uses: docker/build-push-action@v6
        with:
          push: true
          target: mmo-server
          tags: rejdeboer/mmo-server:latest
          secrets: |
            GIT_AUTH_TOKEN=${{ secrets.PAT }}

  # modify-manifest:
  #   needs: docker
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check out config repo
  #       uses: actions/checkout@v3
  #       with:
  #         repository: 'rejdeboer/multiplayer-deployment'
  #         token: ${{ secrets.PAT }}
  #
  #     - name: Modify application image
  #       run: |
  #         git config user.email rick.deboer@live.nl
  #         git config user.name rejdeboer
  #         sed -i "s+rejdeboer.azurecr.io/multiplayer-websocket:.*+rejdeboer.azurecr.io/multiplayer-websocket:${{ github.sha }}+g" deploy/multiplayer-websocket-deployment.yml
  #         git add .
  #         git commit -m 'automated: update multiplayer-websocket image'
  #         git push origin master
