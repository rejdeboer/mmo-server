// automatically generated by the FlatBuffers compiler, do not modify

// @generated

use core::cmp::Ordering;
use core::mem;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod game {

    use core::cmp::Ordering;
    use core::mem;

    extern crate flatbuffers;
    use self::flatbuffers::{EndianScalar, Follow};

    // struct Vec3, aligned to 4
    #[repr(transparent)]
    #[derive(Clone, Copy, PartialEq)]
    pub struct Vec3(pub [u8; 12]);
    impl Default for Vec3 {
        fn default() -> Self {
            Self([0; 12])
        }
    }
    impl core::fmt::Debug for Vec3 {
        fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
            f.debug_struct("Vec3")
                .field("x", &self.x())
                .field("y", &self.y())
                .field("z", &self.z())
                .finish()
        }
    }

    impl flatbuffers::SimpleToVerifyInSlice for Vec3 {}
    impl<'a> flatbuffers::Follow<'a> for Vec3 {
        type Inner = &'a Vec3;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            <&'a Vec3>::follow(buf, loc)
        }
    }
    impl<'a> flatbuffers::Follow<'a> for &'a Vec3 {
        type Inner = &'a Vec3;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            flatbuffers::follow_cast_ref::<Vec3>(buf, loc)
        }
    }
    impl<'b> flatbuffers::Push for Vec3 {
        type Output = Vec3;
        #[inline]
        unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
            let src = ::core::slice::from_raw_parts(
                self as *const Vec3 as *const u8,
                <Self as flatbuffers::Push>::size(),
            );
            dst.copy_from_slice(src);
        }
        #[inline]
        fn alignment() -> flatbuffers::PushAlignment {
            flatbuffers::PushAlignment::new(4)
        }
    }

    impl<'a> flatbuffers::Verifiable for Vec3 {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.in_buffer::<Self>(pos)
        }
    }

    impl<'a> Vec3 {
        #[allow(clippy::too_many_arguments)]
        pub fn new(x: f32, y: f32, z: f32) -> Self {
            let mut s = Self([0; 12]);
            s.set_x(x);
            s.set_y(y);
            s.set_z(z);
            s
        }

        pub fn x(&self) -> f32 {
            let mut mem = core::mem::MaybeUninit::<<f32 as EndianScalar>::Scalar>::uninit();
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid value in this slot
            EndianScalar::from_little_endian(unsafe {
                core::ptr::copy_nonoverlapping(
                    self.0[0..].as_ptr(),
                    mem.as_mut_ptr() as *mut u8,
                    core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
                );
                mem.assume_init()
            })
        }

        pub fn set_x(&mut self, x: f32) {
            let x_le = x.to_little_endian();
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid value in this slot
            unsafe {
                core::ptr::copy_nonoverlapping(
                    &x_le as *const _ as *const u8,
                    self.0[0..].as_mut_ptr(),
                    core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
                );
            }
        }

        pub fn y(&self) -> f32 {
            let mut mem = core::mem::MaybeUninit::<<f32 as EndianScalar>::Scalar>::uninit();
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid value in this slot
            EndianScalar::from_little_endian(unsafe {
                core::ptr::copy_nonoverlapping(
                    self.0[4..].as_ptr(),
                    mem.as_mut_ptr() as *mut u8,
                    core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
                );
                mem.assume_init()
            })
        }

        pub fn set_y(&mut self, x: f32) {
            let x_le = x.to_little_endian();
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid value in this slot
            unsafe {
                core::ptr::copy_nonoverlapping(
                    &x_le as *const _ as *const u8,
                    self.0[4..].as_mut_ptr(),
                    core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
                );
            }
        }

        pub fn z(&self) -> f32 {
            let mut mem = core::mem::MaybeUninit::<<f32 as EndianScalar>::Scalar>::uninit();
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid value in this slot
            EndianScalar::from_little_endian(unsafe {
                core::ptr::copy_nonoverlapping(
                    self.0[8..].as_ptr(),
                    mem.as_mut_ptr() as *mut u8,
                    core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
                );
                mem.assume_init()
            })
        }

        pub fn set_z(&mut self, x: f32) {
            let x_le = x.to_little_endian();
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid value in this slot
            unsafe {
                core::ptr::copy_nonoverlapping(
                    &x_le as *const _ as *const u8,
                    self.0[8..].as_mut_ptr(),
                    core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
                );
            }
        }
    }

    pub enum PlayerOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct Player<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for Player<'a> {
        type Inner = Player<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> Player<'a> {
        pub const VT_POS: flatbuffers::VOffsetT = 4;
        pub const VT_MANA: flatbuffers::VOffsetT = 6;
        pub const VT_HP: flatbuffers::VOffsetT = 8;
        pub const VT_NAME: flatbuffers::VOffsetT = 10;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            Player { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<
            'bldr: 'args,
            'args: 'mut_bldr,
            'mut_bldr,
            A: flatbuffers::Allocator + 'bldr,
        >(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
            args: &'args PlayerArgs<'args>,
        ) -> flatbuffers::WIPOffset<Player<'bldr>> {
            let mut builder = PlayerBuilder::new(_fbb);
            if let Some(x) = args.name {
                builder.add_name(x);
            }
            if let Some(x) = args.pos {
                builder.add_pos(x);
            }
            builder.add_hp(args.hp);
            builder.add_mana(args.mana);
            builder.finish()
        }

        #[inline]
        pub fn pos(&self) -> Option<&'a Vec3> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<Vec3>(Player::VT_POS, None) }
        }
        #[inline]
        pub fn mana(&self) -> i16 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<i16>(Player::VT_MANA, Some(150)).unwrap() }
        }
        #[inline]
        pub fn hp(&self) -> i16 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<i16>(Player::VT_HP, Some(100)).unwrap() }
        }
        #[inline]
        pub fn name(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(Player::VT_NAME, None)
            }
        }
    }

    impl flatbuffers::Verifiable for Player<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<Vec3>("pos", Self::VT_POS, false)?
                .visit_field::<i16>("mana", Self::VT_MANA, false)?
                .visit_field::<i16>("hp", Self::VT_HP, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
                .finish();
            Ok(())
        }
    }
    pub struct PlayerArgs<'a> {
        pub pos: Option<&'a Vec3>,
        pub mana: i16,
        pub hp: i16,
        pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    }
    impl<'a> Default for PlayerArgs<'a> {
        #[inline]
        fn default() -> Self {
            PlayerArgs {
                pos: None,
                mana: 150,
                hp: 100,
                name: None,
            }
        }
    }

    pub struct PlayerBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> PlayerBuilder<'a, 'b, A> {
        #[inline]
        pub fn add_pos(&mut self, pos: &Vec3) {
            self.fbb_.push_slot_always::<&Vec3>(Player::VT_POS, pos);
        }
        #[inline]
        pub fn add_mana(&mut self, mana: i16) {
            self.fbb_.push_slot::<i16>(Player::VT_MANA, mana, 150);
        }
        #[inline]
        pub fn add_hp(&mut self, hp: i16) {
            self.fbb_.push_slot::<i16>(Player::VT_HP, hp, 100);
        }
        #[inline]
        pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(Player::VT_NAME, name);
        }
        #[inline]
        pub fn new(
            _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        ) -> PlayerBuilder<'a, 'b, A> {
            let start = _fbb.start_table();
            PlayerBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<Player<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for Player<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("Player");
            ds.field("pos", &self.pos());
            ds.field("mana", &self.mana());
            ds.field("hp", &self.hp());
            ds.field("name", &self.name());
            ds.finish()
        }
    }
    #[inline]
    /// Verifies that a buffer of bytes contains a `Player`
    /// and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_player_unchecked`.
    pub fn root_as_player(buf: &[u8]) -> Result<Player, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::root::<Player>(buf)
    }
    #[inline]
    /// Verifies that a buffer of bytes contains a size prefixed
    /// `Player` and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `size_prefixed_root_as_player_unchecked`.
    pub fn size_prefixed_root_as_player(
        buf: &[u8],
    ) -> Result<Player, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::size_prefixed_root::<Player>(buf)
    }
    #[inline]
    /// Verifies, with the given options, that a buffer of bytes
    /// contains a `Player` and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_player_unchecked`.
    pub fn root_as_player_with_opts<'b, 'o>(
        opts: &'o flatbuffers::VerifierOptions,
        buf: &'b [u8],
    ) -> Result<Player<'b>, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::root_with_opts::<Player<'b>>(opts, buf)
    }
    #[inline]
    /// Verifies, with the given verifier options, that a buffer of
    /// bytes contains a size prefixed `Player` and returns
    /// it. Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_player_unchecked`.
    pub fn size_prefixed_root_as_player_with_opts<'b, 'o>(
        opts: &'o flatbuffers::VerifierOptions,
        buf: &'b [u8],
    ) -> Result<Player<'b>, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::size_prefixed_root_with_opts::<Player<'b>>(opts, buf)
    }
    #[inline]
    /// Assumes, without verification, that a buffer of bytes contains a Player and returns it.
    /// # Safety
    /// Callers must trust the given bytes do indeed contain a valid `Player`.
    pub unsafe fn root_as_player_unchecked(buf: &[u8]) -> Player {
        flatbuffers::root_unchecked::<Player>(buf)
    }
    #[inline]
    /// Assumes, without verification, that a buffer of bytes contains a size prefixed Player and returns it.
    /// # Safety
    /// Callers must trust the given bytes do indeed contain a valid size prefixed `Player`.
    pub unsafe fn size_prefixed_root_as_player_unchecked(buf: &[u8]) -> Player {
        flatbuffers::size_prefixed_root_unchecked::<Player>(buf)
    }
    #[inline]
    pub fn finish_player_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        root: flatbuffers::WIPOffset<Player<'a>>,
    ) {
        fbb.finish(root, None);
    }

    #[inline]
    pub fn finish_size_prefixed_player_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        root: flatbuffers::WIPOffset<Player<'a>>,
    ) {
        fbb.finish_size_prefixed(root, None);
    }
} // pub mod Game
