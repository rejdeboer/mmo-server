// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use crate::common_generated::*;
use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod mmo {

  use crate::common_generated::*;
  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_EVENT_DATA: u8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_EVENT_DATA: u8 = 1;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_EVENT_DATA: [EventData; 2] = [
  EventData::NONE,
  EventData::EntityMoveEvent,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct EventData(pub u8);
#[allow(non_upper_case_globals)]
impl EventData {
  pub const NONE: Self = Self(0);
  pub const EntityMoveEvent: Self = Self(1);

  pub const ENUM_MIN: u8 = 0;
  pub const ENUM_MAX: u8 = 1;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::NONE,
    Self::EntityMoveEvent,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::NONE => Some("NONE"),
      Self::EntityMoveEvent => Some("EntityMoveEvent"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for EventData {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for EventData {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<u8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for EventData {
    type Output = EventData;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<u8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for EventData {
  type Scalar = u8;
  #[inline]
  fn to_little_endian(self) -> u8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: u8) -> Self {
    let b = u8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for EventData {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for EventData {}
pub struct EventDataUnionTableOffset {}

pub enum EntityMoveEventOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EntityMoveEvent<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EntityMoveEvent<'a> {
  type Inner = EntityMoveEvent<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EntityMoveEvent<'a> {
  pub const VT_ENTITY_ID: flatbuffers::VOffsetT = 4;
  pub const VT_POSITION: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EntityMoveEvent { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EntityMoveEventArgs<'args>
  ) -> flatbuffers::WIPOffset<EntityMoveEvent<'bldr>> {
    let mut builder = EntityMoveEventBuilder::new(_fbb);
    if let Some(x) = args.position { builder.add_position(x); }
    builder.add_entity_id(args.entity_id);
    builder.finish()
  }


  #[inline]
  pub fn entity_id(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EntityMoveEvent::VT_ENTITY_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn position(&self) -> Option<&'a Vec3> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Vec3>(EntityMoveEvent::VT_POSITION, None)}
  }
}

impl flatbuffers::Verifiable for EntityMoveEvent<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("entity_id", Self::VT_ENTITY_ID, false)?
     .visit_field::<Vec3>("position", Self::VT_POSITION, false)?
     .finish();
    Ok(())
  }
}
pub struct EntityMoveEventArgs<'a> {
    pub entity_id: i32,
    pub position: Option<&'a Vec3>,
}
impl<'a> Default for EntityMoveEventArgs<'a> {
  #[inline]
  fn default() -> Self {
    EntityMoveEventArgs {
      entity_id: 0,
      position: None,
    }
  }
}

pub struct EntityMoveEventBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EntityMoveEventBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_entity_id(&mut self, entity_id: i32) {
    self.fbb_.push_slot::<i32>(EntityMoveEvent::VT_ENTITY_ID, entity_id, 0);
  }
  #[inline]
  pub fn add_position(&mut self, position: &Vec3) {
    self.fbb_.push_slot_always::<&Vec3>(EntityMoveEvent::VT_POSITION, position);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EntityMoveEventBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EntityMoveEventBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EntityMoveEvent<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EntityMoveEvent<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EntityMoveEvent");
      ds.field("entity_id", &self.entity_id());
      ds.field("position", &self.position());
      ds.finish()
  }
}
pub enum EventOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Event<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Event<'a> {
  type Inner = Event<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Event<'a> {
  pub const VT_DATA_TYPE: flatbuffers::VOffsetT = 4;
  pub const VT_DATA: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Event { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EventArgs
  ) -> flatbuffers::WIPOffset<Event<'bldr>> {
    let mut builder = EventBuilder::new(_fbb);
    if let Some(x) = args.data { builder.add_data(x); }
    builder.add_data_type(args.data_type);
    builder.finish()
  }


  #[inline]
  pub fn data_type(&self) -> EventData {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<EventData>(Event::VT_DATA_TYPE, Some(EventData::NONE)).unwrap()}
  }
  #[inline]
  pub fn data(&self) -> flatbuffers::Table<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(Event::VT_DATA, None).unwrap()}
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn data_as_entity_move_event(&self) -> Option<EntityMoveEvent<'a>> {
    if self.data_type() == EventData::EntityMoveEvent {
      let u = self.data();
      // Safety:
      // Created from a valid Table for this object
      // Which contains a valid union in this slot
      Some(unsafe { EntityMoveEvent::init_from_table(u) })
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for Event<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_union::<EventData, _>("data_type", Self::VT_DATA_TYPE, "data", Self::VT_DATA, true, |key, v, pos| {
        match key {
          EventData::EntityMoveEvent => v.verify_union_variant::<flatbuffers::ForwardsUOffset<EntityMoveEvent>>("EventData::EntityMoveEvent", pos),
          _ => Ok(()),
        }
     })?
     .finish();
    Ok(())
  }
}
pub struct EventArgs {
    pub data_type: EventData,
    pub data: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for EventArgs {
  #[inline]
  fn default() -> Self {
    EventArgs {
      data_type: EventData::NONE,
      data: None, // required field
    }
  }
}

pub struct EventBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EventBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_data_type(&mut self, data_type: EventData) {
    self.fbb_.push_slot::<EventData>(Event::VT_DATA_TYPE, data_type, EventData::NONE);
  }
  #[inline]
  pub fn add_data(&mut self, data: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Event::VT_DATA, data);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EventBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EventBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Event<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, Event::VT_DATA,"data");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Event<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Event");
      ds.field("data_type", &self.data_type());
      match self.data_type() {
        EventData::EntityMoveEvent => {
          if let Some(x) = self.data_as_entity_move_event() {
            ds.field("data", &x)
          } else {
            ds.field("data", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("data", &x)
        },
      };
      ds.finish()
  }
}
pub enum BatchedEventsOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct BatchedEvents<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for BatchedEvents<'a> {
  type Inner = BatchedEvents<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> BatchedEvents<'a> {
  pub const VT_EVENTS: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    BatchedEvents { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args BatchedEventsArgs<'args>
  ) -> flatbuffers::WIPOffset<BatchedEvents<'bldr>> {
    let mut builder = BatchedEventsBuilder::new(_fbb);
    if let Some(x) = args.events { builder.add_events(x); }
    builder.finish()
  }


  #[inline]
  pub fn events(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Event<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Event>>>>(BatchedEvents::VT_EVENTS, None)}
  }
}

impl flatbuffers::Verifiable for BatchedEvents<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Event>>>>("events", Self::VT_EVENTS, false)?
     .finish();
    Ok(())
  }
}
pub struct BatchedEventsArgs<'a> {
    pub events: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Event<'a>>>>>,
}
impl<'a> Default for BatchedEventsArgs<'a> {
  #[inline]
  fn default() -> Self {
    BatchedEventsArgs {
      events: None,
    }
  }
}

pub struct BatchedEventsBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> BatchedEventsBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_events(&mut self, events: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Event<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BatchedEvents::VT_EVENTS, events);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> BatchedEventsBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    BatchedEventsBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<BatchedEvents<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for BatchedEvents<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("BatchedEvents");
      ds.field("events", &self.events());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `BatchedEvents`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_batched_events_unchecked`.
pub fn root_as_batched_events(buf: &[u8]) -> Result<BatchedEvents, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<BatchedEvents>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `BatchedEvents` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_batched_events_unchecked`.
pub fn size_prefixed_root_as_batched_events(buf: &[u8]) -> Result<BatchedEvents, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<BatchedEvents>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `BatchedEvents` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_batched_events_unchecked`.
pub fn root_as_batched_events_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<BatchedEvents<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<BatchedEvents<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `BatchedEvents` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_batched_events_unchecked`.
pub fn size_prefixed_root_as_batched_events_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<BatchedEvents<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<BatchedEvents<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a BatchedEvents and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `BatchedEvents`.
pub unsafe fn root_as_batched_events_unchecked(buf: &[u8]) -> BatchedEvents {
  flatbuffers::root_unchecked::<BatchedEvents>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed BatchedEvents and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `BatchedEvents`.
pub unsafe fn size_prefixed_root_as_batched_events_unchecked(buf: &[u8]) -> BatchedEvents {
  flatbuffers::size_prefixed_root_unchecked::<BatchedEvents>(buf)
}
#[inline]
pub fn finish_batched_events_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<BatchedEvents<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_batched_events_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<BatchedEvents<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod mmo

