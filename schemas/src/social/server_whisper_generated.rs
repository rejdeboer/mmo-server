// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ServerWhisperOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ServerWhisper<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ServerWhisper<'a> {
  type Inner = ServerWhisper<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ServerWhisper<'a> {
  pub const VT_SENDER_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_SENDER_ID: flatbuffers::VOffsetT = 6;
  pub const VT_RECIPIENT_NAME: flatbuffers::VOffsetT = 8;
  pub const VT_RECIPIENT_ID: flatbuffers::VOffsetT = 10;
  pub const VT_TEXT: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ServerWhisper { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ServerWhisperArgs<'args>
  ) -> flatbuffers::WIPOffset<ServerWhisper<'bldr>> {
    let mut builder = ServerWhisperBuilder::new(_fbb);
    if let Some(x) = args.text { builder.add_text(x); }
    builder.add_recipient_id(args.recipient_id);
    if let Some(x) = args.recipient_name { builder.add_recipient_name(x); }
    builder.add_sender_id(args.sender_id);
    if let Some(x) = args.sender_name { builder.add_sender_name(x); }
    builder.finish()
  }


  #[inline]
  pub fn sender_name(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ServerWhisper::VT_SENDER_NAME, None).unwrap()}
  }
  #[inline]
  pub fn sender_id(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ServerWhisper::VT_SENDER_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn recipient_name(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ServerWhisper::VT_RECIPIENT_NAME, None).unwrap()}
  }
  #[inline]
  pub fn recipient_id(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ServerWhisper::VT_RECIPIENT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn text(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ServerWhisper::VT_TEXT, None).unwrap()}
  }
}

impl flatbuffers::Verifiable for ServerWhisper<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sender_name", Self::VT_SENDER_NAME, true)?
     .visit_field::<i32>("sender_id", Self::VT_SENDER_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("recipient_name", Self::VT_RECIPIENT_NAME, true)?
     .visit_field::<i32>("recipient_id", Self::VT_RECIPIENT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("text", Self::VT_TEXT, true)?
     .finish();
    Ok(())
  }
}
pub struct ServerWhisperArgs<'a> {
    pub sender_name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sender_id: i32,
    pub recipient_name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub recipient_id: i32,
    pub text: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for ServerWhisperArgs<'a> {
  #[inline]
  fn default() -> Self {
    ServerWhisperArgs {
      sender_name: None, // required field
      sender_id: 0,
      recipient_name: None, // required field
      recipient_id: 0,
      text: None, // required field
    }
  }
}

pub struct ServerWhisperBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ServerWhisperBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_sender_name(&mut self, sender_name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ServerWhisper::VT_SENDER_NAME, sender_name);
  }
  #[inline]
  pub fn add_sender_id(&mut self, sender_id: i32) {
    self.fbb_.push_slot::<i32>(ServerWhisper::VT_SENDER_ID, sender_id, 0);
  }
  #[inline]
  pub fn add_recipient_name(&mut self, recipient_name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ServerWhisper::VT_RECIPIENT_NAME, recipient_name);
  }
  #[inline]
  pub fn add_recipient_id(&mut self, recipient_id: i32) {
    self.fbb_.push_slot::<i32>(ServerWhisper::VT_RECIPIENT_ID, recipient_id, 0);
  }
  #[inline]
  pub fn add_text(&mut self, text: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ServerWhisper::VT_TEXT, text);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ServerWhisperBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ServerWhisperBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ServerWhisper<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, ServerWhisper::VT_SENDER_NAME,"sender_name");
    self.fbb_.required(o, ServerWhisper::VT_RECIPIENT_NAME,"recipient_name");
    self.fbb_.required(o, ServerWhisper::VT_TEXT,"text");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ServerWhisper<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ServerWhisper");
      ds.field("sender_name", &self.sender_name());
      ds.field("sender_id", &self.sender_id());
      ds.field("recipient_name", &self.recipient_name());
      ds.field("recipient_id", &self.recipient_id());
      ds.field("text", &self.text());
      ds.finish()
  }
}
