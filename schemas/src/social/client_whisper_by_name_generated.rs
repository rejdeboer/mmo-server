// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::cmp::Ordering;
use core::mem;
pub enum ClientWhisperByNameOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ClientWhisperByName<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ClientWhisperByName<'a> {
    type Inner = ClientWhisperByName<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table::new(buf, loc),
        }
    }
}

impl<'a> ClientWhisperByName<'a> {
    pub const VT_RECIPIENT_NAME: flatbuffers::VOffsetT = 4;
    pub const VT_TEXT: flatbuffers::VOffsetT = 6;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        ClientWhisperByName { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
        args: &'args ClientWhisperByNameArgs<'args>,
    ) -> flatbuffers::WIPOffset<ClientWhisperByName<'bldr>> {
        let mut builder = ClientWhisperByNameBuilder::new(_fbb);
        if let Some(x) = args.text {
            builder.add_text(x);
        }
        if let Some(x) = args.recipient_name {
            builder.add_recipient_name(x);
        }
        builder.finish()
    }

    #[inline]
    pub fn recipient_name(&self) -> &'a str {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<&str>>(
                    ClientWhisperByName::VT_RECIPIENT_NAME,
                    None,
                )
                .unwrap()
        }
    }
    #[inline]
    pub fn text(&self) -> &'a str {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<&str>>(ClientWhisperByName::VT_TEXT, None)
                .unwrap()
        }
    }
}

impl flatbuffers::Verifiable for ClientWhisperByName<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                "recipient_name",
                Self::VT_RECIPIENT_NAME,
                true,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<&str>>("text", Self::VT_TEXT, true)?
            .finish();
        Ok(())
    }
}
pub struct ClientWhisperByNameArgs<'a> {
    pub recipient_name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub text: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for ClientWhisperByNameArgs<'a> {
    #[inline]
    fn default() -> Self {
        ClientWhisperByNameArgs {
            recipient_name: None, // required field
            text: None,           // required field
        }
    }
}

pub struct ClientWhisperByNameBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ClientWhisperByNameBuilder<'a, 'b, A> {
    #[inline]
    pub fn add_recipient_name(&mut self, recipient_name: flatbuffers::WIPOffset<&'b str>) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            ClientWhisperByName::VT_RECIPIENT_NAME,
            recipient_name,
        );
    }
    #[inline]
    pub fn add_text(&mut self, text: flatbuffers::WIPOffset<&'b str>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<_>>(ClientWhisperByName::VT_TEXT, text);
    }
    #[inline]
    pub fn new(
        _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    ) -> ClientWhisperByNameBuilder<'a, 'b, A> {
        let start = _fbb.start_table();
        ClientWhisperByNameBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<ClientWhisperByName<'a>> {
        let o = self.fbb_.end_table(self.start_);
        self.fbb_
            .required(o, ClientWhisperByName::VT_RECIPIENT_NAME, "recipient_name");
        self.fbb_.required(o, ClientWhisperByName::VT_TEXT, "text");
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for ClientWhisperByName<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("ClientWhisperByName");
        ds.field("recipient_name", &self.recipient_name());
        ds.field("text", &self.text());
        ds.finish()
    }
}
