// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use crate::common_generated::*;
use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod mmo {

  use crate::common_generated::*;
  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum PlayerOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Player<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Player<'a> {
  type Inner = Player<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Player<'a> {
  pub const VT_CHARACTER_ID: flatbuffers::VOffsetT = 4;
  pub const VT_POS: flatbuffers::VOffsetT = 6;
  pub const VT_MANA: flatbuffers::VOffsetT = 8;
  pub const VT_HP: flatbuffers::VOffsetT = 10;
  pub const VT_NAME: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Player { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args PlayerArgs<'args>
  ) -> flatbuffers::WIPOffset<Player<'bldr>> {
    let mut builder = PlayerBuilder::new(_fbb);
    if let Some(x) = args.name { builder.add_name(x); }
    builder.add_hp(args.hp);
    builder.add_mana(args.mana);
    if let Some(x) = args.pos { builder.add_pos(x); }
    builder.add_character_id(args.character_id);
    builder.finish()
  }


  #[inline]
  pub fn character_id(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Player::VT_CHARACTER_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn pos(&self) -> Option<&'a Vec3> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Vec3>(Player::VT_POS, None)}
  }
  #[inline]
  pub fn mana(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Player::VT_MANA, Some(0)).unwrap()}
  }
  #[inline]
  pub fn hp(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Player::VT_HP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Player::VT_NAME, None)}
  }
}

impl flatbuffers::Verifiable for Player<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("character_id", Self::VT_CHARACTER_ID, false)?
     .visit_field::<Vec3>("pos", Self::VT_POS, false)?
     .visit_field::<i32>("mana", Self::VT_MANA, false)?
     .visit_field::<i32>("hp", Self::VT_HP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .finish();
    Ok(())
  }
}
pub struct PlayerArgs<'a> {
    pub character_id: i32,
    pub pos: Option<&'a Vec3>,
    pub mana: i32,
    pub hp: i32,
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for PlayerArgs<'a> {
  #[inline]
  fn default() -> Self {
    PlayerArgs {
      character_id: 0,
      pos: None,
      mana: 0,
      hp: 0,
      name: None,
    }
  }
}

pub struct PlayerBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> PlayerBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_character_id(&mut self, character_id: i32) {
    self.fbb_.push_slot::<i32>(Player::VT_CHARACTER_ID, character_id, 0);
  }
  #[inline]
  pub fn add_pos(&mut self, pos: &Vec3) {
    self.fbb_.push_slot_always::<&Vec3>(Player::VT_POS, pos);
  }
  #[inline]
  pub fn add_mana(&mut self, mana: i32) {
    self.fbb_.push_slot::<i32>(Player::VT_MANA, mana, 0);
  }
  #[inline]
  pub fn add_hp(&mut self, hp: i32) {
    self.fbb_.push_slot::<i32>(Player::VT_HP, hp, 0);
  }
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Player::VT_NAME, name);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> PlayerBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    PlayerBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Player<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Player<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Player");
      ds.field("character_id", &self.character_id());
      ds.field("pos", &self.pos());
      ds.field("mana", &self.mana());
      ds.field("hp", &self.hp());
      ds.field("name", &self.name());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Player`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_player_unchecked`.
pub fn root_as_player(buf: &[u8]) -> Result<Player, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Player>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Player` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_player_unchecked`.
pub fn size_prefixed_root_as_player(buf: &[u8]) -> Result<Player, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Player>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Player` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_player_unchecked`.
pub fn root_as_player_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Player<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Player<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Player` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_player_unchecked`.
pub fn size_prefixed_root_as_player_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Player<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Player<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Player and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Player`.
pub unsafe fn root_as_player_unchecked(buf: &[u8]) -> Player {
  flatbuffers::root_unchecked::<Player>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Player and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Player`.
pub unsafe fn size_prefixed_root_as_player_unchecked(buf: &[u8]) -> Player {
  flatbuffers::size_prefixed_root_unchecked::<Player>(buf)
}
#[inline]
pub fn finish_player_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<Player<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_player_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<Player<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod mmo

