// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EntityMoveEventOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EntityMoveEvent<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EntityMoveEvent<'a> {
  type Inner = EntityMoveEvent<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EntityMoveEvent<'a> {
  pub const VT_ENTITY_ID: flatbuffers::VOffsetT = 4;
  pub const VT_POSITION: flatbuffers::VOffsetT = 6;
  pub const VT_DIRECTION: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EntityMoveEvent { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EntityMoveEventArgs<'args>
  ) -> flatbuffers::WIPOffset<EntityMoveEvent<'bldr>> {
    let mut builder = EntityMoveEventBuilder::new(_fbb);
    if let Some(x) = args.direction { builder.add_direction(x); }
    if let Some(x) = args.position { builder.add_position(x); }
    builder.add_entity_id(args.entity_id);
    builder.finish()
  }


  #[inline]
  pub fn entity_id(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(EntityMoveEvent::VT_ENTITY_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn position(&self) -> Option<&'a Vec3> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Vec3>(EntityMoveEvent::VT_POSITION, None)}
  }
  #[inline]
  pub fn direction(&self) -> Option<&'a Vec2> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Vec2>(EntityMoveEvent::VT_DIRECTION, None)}
  }
}

impl flatbuffers::Verifiable for EntityMoveEvent<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("entity_id", Self::VT_ENTITY_ID, false)?
     .visit_field::<Vec3>("position", Self::VT_POSITION, false)?
     .visit_field::<Vec2>("direction", Self::VT_DIRECTION, false)?
     .finish();
    Ok(())
  }
}
pub struct EntityMoveEventArgs<'a> {
    pub entity_id: u32,
    pub position: Option<&'a Vec3>,
    pub direction: Option<&'a Vec2>,
}
impl<'a> Default for EntityMoveEventArgs<'a> {
  #[inline]
  fn default() -> Self {
    EntityMoveEventArgs {
      entity_id: 0,
      position: None,
      direction: None,
    }
  }
}

pub struct EntityMoveEventBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EntityMoveEventBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_entity_id(&mut self, entity_id: u32) {
    self.fbb_.push_slot::<u32>(EntityMoveEvent::VT_ENTITY_ID, entity_id, 0);
  }
  #[inline]
  pub fn add_position(&mut self, position: &Vec3) {
    self.fbb_.push_slot_always::<&Vec3>(EntityMoveEvent::VT_POSITION, position);
  }
  #[inline]
  pub fn add_direction(&mut self, direction: &Vec2) {
    self.fbb_.push_slot_always::<&Vec2>(EntityMoveEvent::VT_DIRECTION, direction);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EntityMoveEventBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EntityMoveEventBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EntityMoveEvent<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EntityMoveEvent<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EntityMoveEvent");
      ds.field("entity_id", &self.entity_id());
      ds.field("position", &self.position());
      ds.field("direction", &self.direction());
      ds.finish()
  }
}
