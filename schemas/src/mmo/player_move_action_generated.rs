// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum PlayerMoveActionOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct PlayerMoveAction<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PlayerMoveAction<'a> {
  type Inner = PlayerMoveAction<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PlayerMoveAction<'a> {
  pub const VT_POSITION: flatbuffers::VOffsetT = 4;
  pub const VT_YAW: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PlayerMoveAction { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args PlayerMoveActionArgs<'args>
  ) -> flatbuffers::WIPOffset<PlayerMoveAction<'bldr>> {
    let mut builder = PlayerMoveActionBuilder::new(_fbb);
    builder.add_yaw(args.yaw);
    if let Some(x) = args.position { builder.add_position(x); }
    builder.finish()
  }


  #[inline]
  pub fn position(&self) -> Option<&'a Vec3> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Vec3>(PlayerMoveAction::VT_POSITION, None)}
  }
  #[inline]
  pub fn yaw(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(PlayerMoveAction::VT_YAW, Some(0.0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for PlayerMoveAction<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<Vec3>("position", Self::VT_POSITION, false)?
     .visit_field::<f32>("yaw", Self::VT_YAW, false)?
     .finish();
    Ok(())
  }
}
pub struct PlayerMoveActionArgs<'a> {
    pub position: Option<&'a Vec3>,
    pub yaw: f32,
}
impl<'a> Default for PlayerMoveActionArgs<'a> {
  #[inline]
  fn default() -> Self {
    PlayerMoveActionArgs {
      position: None,
      yaw: 0.0,
    }
  }
}

pub struct PlayerMoveActionBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> PlayerMoveActionBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_position(&mut self, position: &Vec3) {
    self.fbb_.push_slot_always::<&Vec3>(PlayerMoveAction::VT_POSITION, position);
  }
  #[inline]
  pub fn add_yaw(&mut self, yaw: f32) {
    self.fbb_.push_slot::<f32>(PlayerMoveAction::VT_YAW, yaw, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> PlayerMoveActionBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    PlayerMoveActionBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PlayerMoveAction<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PlayerMoveAction<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PlayerMoveAction");
      ds.field("position", &self.position());
      ds.field("yaw", &self.yaw());
      ds.finish()
  }
}
